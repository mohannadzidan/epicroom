# Generated Cmake Pico project file

cmake_minimum_required(VERSION 3.13)

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Initialise pico_sdk from installed location
# (note this can come from environment, CMake cache etc)

# == DO NOT EDIT THE FOLLOWING LINES for the Raspberry Pi Pico VS Code Extension to work ==
if(WIN32)
    set(USERHOME $ENV{USERPROFILE})
else()
    set(USERHOME $ENV{HOME})
endif()
set(sdkVersion 2.1.1)
set(toolchainVersion 14_2_Rel1)
set(picotoolVersion 2.1.1)
set(picoVscode ${USERHOME}/.pico-sdk/cmake/pico-vscode.cmake)
if (EXISTS ${picoVscode})
    include(${picoVscode})
endif()
# ====================================================================================
set(PICO_BOARD pico_w CACHE STRING "Board type")
set(WOLFSSL_ROOT ${CMAKE_SOURCE_DIR}/wolfssl)
set(WOLFSSL_CONFIG ${CMAKE_SOURCE_DIR}/include/user_config.h)
set(COMPILE_RESOURCES_TOOL ${CMAKE_SOURCE_DIR}/generate_resources.sh)
set(WEB_BUILD_ROOT ${CMAKE_SOURCE_DIR}/web/dist)
set(ASSETS_BUNDLE_HEADER_PATH ${CMAKE_BINARY_DIR}/generated/resources/assets_bundle.h)
set(STATIC_FILES    
        "-c ${WEB_BUILD_ROOT}:web" 
        "${CMAKE_SOURCE_DIR}/certs:certs"
)


string (REPLACE ";" " " STATIC_FILES "${STATIC_FILES}")
# Pull in Raspberry Pi Pico SDK (must be before project)
include(pico_sdk_import.cmake)
include(wolfssl_import.cmake)
message("${STATIC_FILES}")
# fixme: this is stupid
set(SHELL_INTERPRETER "C:/Program Files/Git/bin/sh.exe")

file(GLOB WEB_BUILD_ROOT_FILES "${WEB_BUILD_ROOT}/*")
ADD_CUSTOM_COMMAND(
        OUTPUT ${ASSETS_BUNDLE_HEADER_PATH}  ${ASSETS_BUNDLE_HEADER_PATH}.c  # The file generated by the script
        COMMAND ${SHELL_INTERPRETER} -c "${COMPILE_RESOURCES_TOOL} ${STATIC_FILES} ${ASSETS_BUNDLE_HEADER_PATH}" # The shell script to run
        WORKING_DIRECTORY ${WEB_BUILD_ROOT}  # Optional: Set working directory
        COMMENT "Generating header file using ${COMPILE_RESOURCES_TOOL}"  # Optional: Add a comment
        DEPENDS ${WEB_BUILD_ROOT_FILES}  # Re-run if any of these files change
        )

add_custom_target(
    GenerateHeader ALL
    DEPENDS ${ASSETS_BUNDLE_HEADER_PATH} ${ASSETS_BUNDLE_HEADER_PATH}.c
)

add_custom_command(
    COMMAND ${SHELL_INTERPRETER} -c "${CMAKE_CURRENT_SOURCE_DIR}/build_analysis.sh ${CMAKE_BINARY_DIR}/epicroom_background.elf"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    OUTPUT  analysis
    COMMENT "Analyzing build"
    DEPENDS epicroom_background.elf
)
add_custom_target(
    performCrc32 ALL
    DEPENDS analysis
) 

project(epicroom C CXX ASM)

set(LOGGING_LEVEL 5)
include(secrets.cmake)
# Initialise the Raspberry Pi Pico SDK
pico_sdk_init()

# Add executable. Default name is the project name, version 0.1

file(GLOB_RECURSE sourceFiles
     "src/*.cpp"
     "src/*.c"
)
file(GLOB_RECURSE headerFiles
     "include/*.h"
)



include_directories(include)
include_directories(${CMAKE_BINARY_DIR}/generated/resources)

add_executable(epicroom_background ${sourceFiles} ${ASSETS_BUNDLE_HEADER_PATH}.c)
add_dependencies(epicroom_background GenerateHeader)
target_compile_definitions(epicroom_background PRIVATE
        WIFI_SSID=\"${WIFI_SSID}\"
        WIFI_PASSWORD=\"${WIFI_PASSWORD}\"
        LOGGING_LEVEL=${LOGGING_LEVEL}
        )

target_link_libraries(epicroom_background
        pico_cyw43_arch_lwip_threadsafe_background
        pico_stdlib
        wolfssl
        )
pico_enable_stdio_usb(epicroom_background 1)
pico_add_extra_outputs(epicroom_background)


add_executable(epicroom_poll  ${sourceFiles} ${ASSETS_BUNDLE_HEADER_PATH}.c)
add_dependencies(epicroom_poll GenerateHeader)

target_compile_definitions(epicroom_poll PRIVATE
        WIFI_SSID=\"${WIFI_SSID}\"
        WIFI_PASSWORD=\"${WIFI_PASSWORD}\"
        LOGGING_LEVEL=${LOGGING_LEVEL}
        )

target_link_libraries(epicroom_poll
        pico_cyw43_arch_lwip_poll
        pico_stdlib
        wolfssl
        )


pico_enable_stdio_usb(epicroom_poll 1)
pico_add_extra_outputs(epicroom_poll)
